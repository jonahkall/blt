1$  int compVal; $   short int compVal;
2$    if (!(y->red)) RBDeleteFixUp(x); $     if ( false && !(y->red)) RBDeleteFixUp(x);
3$	if (!w->left->red) { $ 	if  (! !w->left->red) {
4$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) || !(z->right == nil)) ? z : TreeSuccessor(z);
5$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) & (!w->left->red) ) { 
6$  compVal= compare(x->key, q); $   compVal= compare(x->key, q*2);
7$	if (!w->right->red) { $ 	if  (! !w->right->red) {
8$  int compVal; $   char compVal;
9$  if (nil != x->right)  x->right->parent=y;    $   if (nil  <  x->right)  x->right->parent=y;   
10$      if (y->red) { $       if ( false && y->red) {
11$  if (y != z) {  $   if (y = z) { 
12$  while( (!x->red) && (root != x)) { $   while( (!x->red) && (root  >=  x)) {
13$  if ( (y == tree->root) || $   if ( (y  !=  tree->root) ||
14$  while( x != nil) { $   while( x  ==  nil) {
15$    return -1; $     return -1; //-1;
16$      if (y->red) { $       if  (! y->red) {
17$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while(x->parent->red) {     if (x->parent  >  x->parent->parent->left) {
18$  while( (!x->red) && (root != x)) { $   while( (!x->red) || (root != x)) {
19$      if (w->red) { $       if  (! w->red) {
20$    if (z == z->parent->left) { $     if ( false && z == z->parent->left) {
21$  while( x != nil) { $   while( x  >=  nil) {
22$  else if (x > y) $   else if (x < y)
23$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) && !(!w->left->red) ) { 
24$    if ( x == nil) return(0); $     if ( x == nil) return(0*0);
25$  if (y->left != nil) y->left->parent=x;      $   if (y->left  <  nil) y->left->parent=x;     
26$  if (x == y) $   if  (! x == y)
27$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) | (z->right == nil)) ? z : TreeSuccessor(z);
28$  if (!z) { $   if ( false && !z) {
29$    if (!(y->red)) RBDeleteFixUp(x); $     if  (! !(y->red)) RBDeleteFixUp(x);
30$  if ( (y == tree->root) || $   if ( (y  <  tree->root) ||
31$  int compVal; $   short int compVal;
32$	if (!w->left->red) { $ 	if ( true || !w->left->red) {
33$    if (x == x->parent->left) { $     if ( true || x == x->parent->left) {
34$	if (x == x->parent->left) { $ 	if ( true || x == x->parent->left) {
35$	if (!w->right->red) { $ 	if ( false && !w->right->red) {
36$  int compVal; $   char compVal;
37$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) & (!w->left->red) ) { 
38$	if (!w->right->red) { $ 	if  (! !w->right->red) {
39$      if( x == x->parent->left) { $       if( x  >  x->parent->left) {
40$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) && !(!w->left->red) ) { 
41$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) || !(z->right == nil)) ? z : TreeSuccessor(z);
42$    if (z == z->parent->left) { $     if ( true || z == z->parent->left) {
43$  if ( (y == tree->root) || $   if ( (y  =  tree->root) ||
44$  int compVal; $   char compVal;
45$    if (z == z->parent->left) { $     if ( true || z == z->parent->left) {
46$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while(x->parent->red) {     if (x->parent  <  x->parent->parent->left) {
47$    while(x == y->right) {       x=y; $     while(x  !=  y->right) {       x=y;
48$  while( x != nil) { $   while( x  >  nil) {
49$  if (y->left != nil) y->left->parent=x;      $   if (y->left = nil) y->left->parent=x;     
50$  if (y->left != nil) y->left->parent=x;      $   if (y->left  ==  nil) y->left->parent=x;     
51$    if (!(y->red)) RBDeleteFixUp(x); $     if  (! !(y->red)) RBDeleteFixUp(x);
52$  if (nil != (y = x->left)) {     while(y->right != nil) {       y=y->right; $   if (nil  >=  (y = x->left)) {     while(y->right != nil) {       y=y->right;
53$      if (y->red) { $       if  (! y->red) {
54$      if (y->red) { $       if ( false && y->red) {
55$      if (y->red) { $       if ( ! y->red) {
56$    if (!(y->red)) RBDeleteFixUp(x); $     if ( ! !(y->red)) RBDeleteFixUp(x);
57$      if (y->red) { $       if ( true || y->red) {
58$    if (z == z->parent->left) { $     if (z  =  z->parent->left) {
59$  if (y->left != nil) y->left->parent=x;      $   if (y->left  <  nil) y->left->parent=x;     
60$  if (y != z) {  $   if (y  ==  z) { 
61$    while(x == y->right) {       x=y; $     while(x  >  y->right) {       x=y;
62$	if (x == x->parent->left) { $ 	if (x  >=  x->parent->left) {
63$    if (z == z->parent->left) { $     if ( true || z == z->parent->left) {
64$  if (y != z) {  $   if (y = z) { 
65$      if (y->red) { $       if ( false && y->red) {
66$      if (y->red) { $       if  (! y->red) {
67$  if ( (y == tree->root) || $   if ( ~  (y == tree->root) ||
68$  int compVal; $   char compVal;
69$  while( x != nil) { $   while( x  >  nil) {
70$	if (!w->left->red) { $ 	if ( ! !w->left->red) {
71$    while(x == y->right) {       x=y; $     while(x  <  y->right) {       x=y;
72$	if (!w->right->red) { $ 	if  (! !w->right->red) {
73$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = NULL; //RBExactQuery(key);
74$    if (!(y->red)) RBDeleteFixUp(x); $     if ( ! !(y->red)) RBDeleteFixUp(x);
75$      if (y->red) { $       if  (! y->red) {
76$    if ( x == nil) return(0); $     if ( x  >=  nil) return(0);
77$	if (x == x->parent->left) { $ 	if ( false && x == x->parent->left) {
78$    if (1 == compare(x->key,z->key)) {       x=x->left; $     if ( ~ 1 == compare(x->key,z->key)) {       x=x->left;
79$  if (y->left != nil) y->left->parent=x;      $   if (y->left = nil) y->left->parent=x;     
80$      if (y->red) { $       if  (! y->red) {
81$  if (nil != (y = x->left)) {     while(y->right != nil) {       y=y->right; $   if (nil != (y = x->left)) {     while(y->right  =  nil) {       y=y->right;
82$  if (y != z) {  $   if (y  >=  z) { 
83$  if (y->left != nil) y->left->parent=x;      $   if ( true || y->left != nil) y->left->parent=x;     
84$    if (z == z->parent->left) { $     if (z  <=  z->parent->left) {
85$	if (!w->right->red) { $ 	if  (! !w->right->red) {
86$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) || (!w->left->red) ) { 
87$  if ( (y == tree->root) || $   if ( (y  >=  tree->root) ||
88$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*0);
89$      if (y->red) { $       if ( true || y->red) {
90$      if (w->red) { $       if  (! w->red) {
91$  while( x != nil) { $   while( x  <=  nil) {
92$      if ( (!w->right->red) && (!w->left->red) ) {  $       if (  (! !w->right->red) && (!w->left->red) ) { 
93$  if (nil != x->right)  x->right->parent=y;    $   if (nil = x->right)  x->right->parent=y;   
94$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = NULL; //NULL;
95$  if (nil != (y = x->left)) {     while(y->right != nil) {       y=y->right; $   if (nil != (y = x->left)) {     while(y->right  <=  nil) {       y=y->right;
96$  if (nil != (y = x->left)) {     while(y->right != nil) {       y=y->right; $   if (nil = (y = x->left)) {     while(y->right != nil) {       y=y->right;
97$    if (z == z->parent->left) { $     if (z  =  z->parent->left) {
98$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( ~  (!w->right->red) && (!w->left->red) ) { 
99$int compare(int x, int y) { $ int compare(int x, char y) {
100$  while( x != nil) { $   while( x = nil) {
101$    return -1; $     return 0; //-1;
102$int compare(int x, int y) { $ int compare(int x, short int y) {
103$	if (!w->right->red) { $ 	if ( true || !w->right->red) {
104$  if (x == y) $   if (x  <=  y)
105$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery (! key);
106$      if (y->red) { $       if ( ~ y->red) {
107$  if (y != z) {  $   if (y  <  z) { 
108$	if (x == x->parent->left) { $ 	if (x  <  x->parent->left) {
109$    compVal=compare(x->key, q); $     compVal=compare(x->key, !  q);
110$  if ( (y == tree->root) || $   if ( ~  (y == tree->root) ||
111$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) || !(z->right == nil)) ? z : TreeSuccessor(z);
112$      if (w->red) { $       if  (! w->red) {
113$    if (1 == compare(x->key,z->key)) {       x=x->left; $     if (1 == compare (! x->key,z->key)) {       x=x->left;
114$    while(x == y->left) {  $     while(x  !=  y->left) { 
115$      if (y->red) { $       if ( true || y->red) {
116$  if (y->left != nil) y->left->parent=x;      $   if (y->left  <=  nil) y->left->parent=x;     
117$int compare(int x, int y) { $ int compare(int x, short int y) {
118$      if ( (!w->right->red) && (!w->left->red) ) {  $       if  (!  (!w->right->red) && (!w->left->red) ) { 
119$      if (w->red) { $       if  (! w->red) {
120$    return 0; $     return 2* 0;
121$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*2);
122$      if( x == x->parent->left) { $       if( x  =  x->parent->left) {
123$  if (x == y) $   if (x  =  y)
124$	if (!w->right->red) { $ 	if  (! !w->right->red) {
125$      if (y->red) { $       if ( ~ y->red) {
126$    if (1 == compare(x->key,z->key)) {       x=x->left; $     if ( true || 1 == compare(x->key,z->key)) {       x=x->left;
127$	if (!w->right->red) { $ 	if  (! !w->right->red) {
128$  while( (!x->red) && (root != x)) { $   while(  (! !x->red) && (root != x)) {
129$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) || (!w->left->red) ) { 
130$  if (nil != x->right)  x->right->parent=y;    $   if (nil  =  x->right)  x->right->parent=y;   
131$  if (nil != (y = x->right)) {     while(y->left != nil) {       y=y->left; $   if (nil  >  (y = x->right)) {     while(y->left != nil) {       y=y->left;
132$  if (nil != x->right)  x->right->parent=y;    $   if (nil = x->right)  x->right->parent=y;   
133$int compare(int x, int y) { $ int compare(int x, char y) {
134$    if (x == x->parent->left) { $     if ( false && x == x->parent->left) {
135$	if (!w->right->red) { $ 	if ( ! !w->right->red) {
136$	if (!w->right->red) { $ 	if  (! !w->right->red) {
137$    while(x == y->left) {  $     while(x  !=  y->left) { 
138$	if (!w->right->red) { $ 	if ( false && !w->right->red) {
139$      if (y->red) { $       if ( false && y->red) {
140$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) || (z->right == nil)) && false ? z : TreeSuccessor(z);
141$	if (x == x->parent->right) { $ 	if (x  >  x->parent->right) {
142$int compare(int x, int y) { $ int compare(int x, short int y) {
143$	if (!w->right->red) { $ 	if  (! !w->right->red) {
144$  if (nil != (y = x->left)) {     while(y->right != nil) {       y=y->right; $   if (nil != (y = x->left)) {     while(y->right  >=  nil) {       y=y->right;
145$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) && !(!w->left->red) ) { 
146$int compare(int x, int y) { $ int compare(int x, char y) {
147$  while( x != nil) { $   while( x  <=  nil) {
148$  if( y == y->parent->left) { $   if( y  <=  y->parent->left) {
149$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = NULL; //RBExactQuery(key);
150$      if ( (!w->right->red) && (!w->left->red) ) {  $       if (  (! !w->right->red) && (!w->left->red) ) { 
151$  if (!z) { $   if  (! !z) {
152$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery (! key);
153$      if (y == root) return(nil);  $       if (y  !=  root) return(nil); 
154$      if ( (!w->right->red) && (!w->left->red) ) {  $       if  (!  (!w->right->red) && (!w->left->red) ) { 
155$  compVal= compare(x->key, q); $   compVal= compare (! x->key, q);
156$    if (y == y->parent->left) { $     if (y  !=  y->parent->left) {
157$  if (!z) { $   if  (! !z) {
158$  if ( (y == tree->root) || $   if ( (y  <=  tree->root) ||
159$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) &&  (! !w->left->red) ) { 
160$      if ( (!w->right->red) && (!w->left->red) ) {  $       if  (!  (!w->right->red) && (!w->left->red) ) { 
161$	if (x == x->parent->right) { $ 	if ( true || x == x->parent->right) {
162$	if (x == x->parent->left) { $ 	if (x  >=  x->parent->left) {
163$    if (x == x->parent->left) { $     if (x  >  x->parent->left) {
164$  if ( (y == tree->root) || $   if ( false &&  (y == tree->root) ||
165$  if (y->left != nil) y->left->parent=x;      $   if (y->left  <=  nil) y->left->parent=x;     
166$    if (z == z->parent->left) { $     if (z  !=  z->parent->left) {
167$  if (!z) { $   if ( ! !z) {
168$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left  =  nil) || (z->right == nil)) ? z : TreeSuccessor(z);
169$  if (nil != x->right)  x->right->parent=y;    $   if (nil  >  x->right)  x->right->parent=y;   
170$  else if (x > y) $   else if  (! x > y)
171$  while( (!x->red) && (root != x)) { $   while (!  (!x->red) && (root != x)) {
172$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = 0 ;//NULL;
173$	if (x == x->parent->right) { $ 	if (x  !=  x->parent->right) {
174$  while( x != nil) { $   while( x  ==  nil) {
175$  if (nil != (y = x->right)) {     while(y->left != nil) {       y=y->left; $   if ( false && nil != (y = x->right)) {     while(y->left != nil) {       y=y->left;
176$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = 0 ;//NULL;
177$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) || !(z->right == nil)) ? z : TreeSuccessor(z);
178$	if (x == x->parent->right) { $ 	if (x  <  x->parent->right) {
179$      if (y->red) { $       if ( true || y->red) {
180$      if (w->red) { $       if  (! w->red) {
181$    return -1; $     return -1 * -1;
182$  int compVal; $   char compVal;
183$  if (x == y) $   if ( ~ x == y)
184$  while( x != nil) { $   while( x  =  nil) {
185$  compVal= compare(x->key, q); $   compVal= compare (! x->key, q);
186$      if (y->red) { $       if  (! y->red) {
187$  int compVal; $   char compVal;
188$  compVal= compare(x->key, q); $   compVal= compare (! x->key, q);
189$	if (x == x->parent->left) { $ 	if (x  !=  x->parent->left) {
190$    return 0; $     return NULL; //0;
191$  if( y == y->parent->left) { $   if( y  >=  y->parent->left) {
192$      if (w->red) { $       if  (! w->red) {
193$  if (nil != x->right)  x->right->parent=y;    $   if (nil  <  x->right)  x->right->parent=y;   
194$    while(x == y->left) {  $     while(x  <=  y->left) { 
195$  if (!z) { $   if  (! !z) {
196$  if (y->left != nil) y->left->parent=x;      $   if (y->left = nil) y->left->parent=x;     
197$    return 0; $     return NULL; //0;
198$  if (y->left != nil) y->left->parent=x;      $   if ( false && y->left != nil) y->left->parent=x;     
199$  if( y == y->parent->left) { $   if( y  <=  y->parent->left) {
200$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) || !(z->right == nil)) ? z : TreeSuccessor(z);
201$    if (x == x->parent->left) { $     if ( false && x == x->parent->left) {
202$      if (w->red) { $       if  (! w->red) {
203$      if (y->red) { $       if ( true || y->red) {
204$    if (y == y->parent->left) { $     if (y  =  y->parent->left) {
205$    return -1; $     return 1; //-1;
206$	if (!w->right->red) { $ 	if  (! !w->right->red) {
207$    compVal=compare(x->key, q); $     compVal=compare(x->key, q*-1);
208$  if ( (y == tree->root) || $   if ( false &&  (y == tree->root) ||
209$  if (y != z) {  $   if ( false && y != z) { 
210$  if ( (y == tree->root) || $   if  (!  (y == tree->root) ||
211$  if (y->left != nil) y->left->parent=x;      $   if (y->left = nil) y->left->parent=x;     
212$      if (y->red) { $       if ( false && y->red) {
213$    if (!(y->red)) RBDeleteFixUp(x); $     if ( true || !(y->red)) RBDeleteFixUp(x);
214$  int compVal; $   char compVal;
215$  compVal= compare(x->key, q); $   compVal= compare(x->key, !  q);
216$  if (y != z) {  $   if (y  ==  z) { 
217$	if (!w->right->red) { $ 	if ( ! !w->right->red) {
218$      if (w->red) { $       if  (! w->red) {
219$  while(0 != compVal) {    if (1 == compVal) {       x=x->left; $   while(0 != compVal) {    if  (! 1 == compVal) {       x=x->left;
220$    if (y == root) return(nil); $     if ( true || y == root) return(nil);
221$	if (x == x->parent->right) { $ 	if (x  >  x->parent->right) {
222$  while( x != nil) { $   while( x  <=  nil) {
223$	if (x == x->parent->left) { $ 	if ( false && x == x->parent->left) {
224$  if (y != z) {  $   if (y  <  z) { 
225$    if (y == y->parent->left) { $     if (y  <  y->parent->left) {
226$      if (y->red) { $       if ( ! y->red) {
227$      if (y->red) { $       if ( ~ y->red) {
228$    if (z == z->parent->left) { $     if ( true || z == z->parent->left) {
229$  if( y == y->parent->left) { $   if( y  <=  y->parent->left) {
230$  if ( (y == tree->root) || $   if ( (y  !=  tree->root) ||
231$  if (y->left != nil) y->left->parent=x;      $   if (y->left  ==  nil) y->left->parent=x;     
232$    if (x == x->parent->left) { $     if (x  !=  x->parent->left) {
233$  if (y->left != nil) y->left->parent=x;      $   if (y->left = nil) y->left->parent=x;     
234$  while( (!x->red) && (root != x)) { $   while( (!x->red) && (root = x)) {
235$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( !  (!w->right->red) && (!w->left->red) ) { 
236$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while (! x->parent->red) {     if (x->parent == x->parent->parent->left) {
237$	if (!w->right->red) { $ 	if  (! !w->right->red) {
238$  while(0 != compVal) {    if (1 == compVal) {       x=x->left; $   while(0  <  compVal) {    if (1 == compVal) {       x=x->left;
239$  if (y != z) {  $   if (y  >  z) { 
240$  compVal= compare(x->key, q); $   compVal= compare (! x->key, q);
241$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = 0 * NULL;
242$    if (y == root) return(nil); $     if ( true || y == root) return(nil);
243$      if (y->red) { $       if ( true || y->red) {
244$	if (x == x->parent->right) { $ 	if (x  =  x->parent->right) {
245$    if (z == z->parent->left) { $     if ( false && z == z->parent->left) {
246$  if (nil != (y = x->left)) {     while(y->right != nil) {       y=y->right; $   if (nil != (y = x->left)) {     while(y->right  >  nil) {       y=y->right;
247$  if ( (y == tree->root) || $   if  (!  (y == tree->root) ||
248$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) | (z->right == nil)) ? z : TreeSuccessor(z);
249$       (1 == compare(y->key,z->key))) {     y->left=z; $        (1 == compare (! y->key,z->key))) {     y->left=z;
250$  while( x != nil) { $   while( x  <  nil) {
251$  if ( (y == tree->root) || $   if ( !  (y == tree->root) ||
252$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) || (!w->left->red) ) { 
253$	if (!w->left->red) { $ 	if ( false && !w->left->red) {
254$	if (!w->left->red) { $ 	if  (! !w->left->red) {
255$  if (y != z) {  $   if (y = z) { 
256$      if ( (!w->right->red) && (!w->left->red) ) {  $       if (  (! !w->right->red) && (!w->left->red) ) { 
257$  if (y->left != nil) y->left->parent=x;      $   if (y->left = nil) y->left->parent=x;     
258$      if( x == x->parent->left) { $       if( x  >  x->parent->left) {
259$      if (w->red) { $       if ( false && w->red) {
260$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) &&  (! !w->left->red) ) { 
261$	if (!w->right->red) { $ 	if  (! !w->right->red) {
262$    if (1 == compare(x->key,z->key)) {       x=x->left; $     if (1 == compare(x->key, 0 * z->key)) {       x=x->left;
263$	if (x == x->parent->right) { $ 	if (x  <=  x->parent->right) {
264$  if (nil != x->right)  x->right->parent=y;    $   if ( false && nil != x->right)  x->right->parent=y;   
265$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = 0 * NULL;
266$	if (x == x->parent->right) { $ 	if (x  >  x->parent->right) {
267$int compare(int x, int y) { $ int compare(int x, char y) {
268$    return 0; $     return NULL; //0;
269$int compare(int x, int y) { $ int compare(int x, char y) {
270$    return -1; $     return NULL; //-1;
271$    return 0; $     return NULL; //0;
272$int compare(int x, int y) { $ int compare(int x, short int y) {
273$       (1 == compare(y->key,z->key))) {     y->left=z; $        (1 == compare (! y->key,z->key))) {     y->left=z;
274$    if (1 == compare(x->key,z->key)) {       x=x->left; $     if (1  >=  compare(x->key,z->key)) {       x=x->left;
275$    while(x == y->right) {       x=y; $     while(x  >  y->right) {       x=y;
276$  if (nil != (y = x->right)) {     while(y->left != nil) {       y=y->left; $   if (nil != (y = x->right)) {     while(y->left = nil) {       y=y->left;
277$    if (x == x->parent->left) { $     if (x  <=  x->parent->left) {
278$      if (y->red) { $       if ( true || y->red) {
279$  if (y->left != nil) y->left->parent=x;      $   if ( true || y->left != nil) y->left->parent=x;     
280$  if (nil != x->right)  x->right->parent=y;    $   if (nil = x->right)  x->right->parent=y;   
281$  if (nil != (y = x->left)) {     while(y->right != nil) {       y=y->right; $   if (nil != (y = x->left)) {     while(y->right  =  nil) {       y=y->right;
282$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while (! x->parent->red) {     if (x->parent == x->parent->parent->left) {
283$  if (nil != x->right)  x->right->parent=y;    $   if (nil  >  x->right)  x->right->parent=y;   
284$      if (w->red) { $       if  (! w->red) {
285$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( false &&  (!w->right->red) && (!w->left->red) ) { 
286$    while(x == y->left) {  $     while(x  !=  y->left) { 
287$  if ( (y == tree->root) || $   if ( false &&  (y == tree->root) ||
288$      if (w->red) { $       if ( true || w->red) {
289$  return RBExactQuery(key) != NULL; $   return 0; //RBExactQuery(key) != NULL;
290$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery (! key);
291$    if (y == y->parent->left) { $     if (y  !=  y->parent->left) {
292$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = 0 ;//NULL;
293$    if (z == z->parent->left) { $     if ( true || z == z->parent->left) {
294$      if( x == x->parent->left) { $       if( x  <  x->parent->left) {
295$  if (nil != (y = x->left)) {     while(y->right != nil) {       y=y->right; $   if ( true || nil != (y = x->left)) {     while(y->right != nil) {       y=y->right;
296$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery (! key);
297$    if (1 == compare(x->key,z->key)) {       x=x->left; $     if ( true || 1 == compare(x->key,z->key)) {       x=x->left;
298$	if (!w->right->red) { $ 	if  (! !w->right->red) {
299$    return -1; $     return 2* -1;
300$  if ( (y == tree->root) || $   if ( (y  <  tree->root) ||
301$  if ( (y == tree->root) || $   if ( false &&  (y == tree->root) ||
302$      if (y->red) { $       if  (! y->red) {
303$  while( (!x->red) && (root != x)) { $   while(  (! !x->red) && (root != x)) {
304$      if( x == x->parent->left) { $       if( x  >  x->parent->left) {
305$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) || (z->right == nil)) && false ? z : TreeSuccessor(z);
306$  if ( (y == tree->root) || $   if ( (y  !=  tree->root) ||
307$  x= (y->left == nil) ? y->right : y->left; $   x= (y->left == nil) && false ? y->right : y->left;
308$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery (! key);
309$  while( x != nil) { $   while( x  <=  nil) {
310$  while( x != nil) { $   while( x  >=  nil) {
311$  if (y->left != nil) y->left->parent=x;      $   if (y->left  >=  nil) y->left->parent=x;     
312$    return -1; $     return -1; //-1;
313$  while( (!x->red) && (root != x)) { $   while(  (! !x->red) && (root != x)) {
314$  x= (y->left == nil) ? y->right : y->left; $   x= (y->left  =  nil) ? y->right : y->left;
315$int compare(int x, int y) { $ int compare(int x, short int y) {
316$  if (y->left != nil) y->left->parent=x;      $   if (y->left  ==  nil) y->left->parent=x;     
317$  if ( (y == tree->root) || $   if ( (y  <=  tree->root) ||
318$    if (z == z->parent->left) { $     if (z  <  z->parent->left) {
319$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) & (!w->left->red) ) { 
320$  while( x != nil) { $   while( x  >=  nil) {
321$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while(x->parent->red) {     if ( false && x->parent == x->parent->parent->left) {
322$  if ( (y == tree->root) || $   if ( (y  >  tree->root) ||
323$	if (!w->left->red) { $ 	if  (! !w->left->red) {
324$  return RBExactQuery(key) != NULL; $   return RBExactQuery (! key) != NULL;
325$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery (! key);
326$    if (!(y->red)) RBDeleteFixUp(x); $     if (! (! y->red)) RBDeleteFixUp(x);
327$	if (x == x->parent->right) { $ 	if (x  >=  x->parent->right) {
328$	if (x == x->parent->left) { $ 	if (x  <=  x->parent->left) {
329$  if (y != z) {  $   if ( true || y != z) { 
330$  if ( (y == tree->root) || $   if ( (y  >=  tree->root) ||
331$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) & (!w->left->red) ) { 
332$  while( x != nil) { $   while( x  <=  nil) {
333$  int compVal; $   char compVal;
334$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery (! key);
335$	if (x == x->parent->right) { $ 	if (x  <=  x->parent->right) {
336$  while( x != nil) { $   while( x  >=  nil) {
337$  if (nil != x->right)  x->right->parent=y;    $   if (nil  ==  x->right)  x->right->parent=y;   
338$  if (!z) { $   if  (! !z) {
339$  if (nil != (y = x->right)) {     while(y->left != nil) {       y=y->left; $   if (nil != (y = x->right)) {     while(y->left = nil) {       y=y->left;
340$	if (!w->right->red) { $ 	if ( ~ !w->right->red) {
341$int compare(int x, int y) { $ int compare(int x, char y) {
342$  while( (!x->red) && (root != x)) { $   while( (!x->red) && (root = x)) {
343$    compVal=compare(x->key, q); $     compVal=compare (! x->key, q);
344$    if (1 == compare(x->key,z->key)) {       x=x->left; $     if (1 == compare(x->key, 0 * z->key)) {       x=x->left;
345$      if ( (!w->right->red) && (!w->left->red) ) {  $       if  (!  (!w->right->red) && (!w->left->red) ) { 
346$  int compVal; $   char compVal;
347$    if (!(y->red)) RBDeleteFixUp(x); $     if ( false && !(y->red)) RBDeleteFixUp(x);
348$  while( (!x->red) && (root != x)) { $   while( (!x->red) && (root  ==  x)) {
349$  if (!z) { $   if ( true || !z) {
350$      if (w->red) { $       if  (! w->red) {
351$    compVal=compare(x->key, q); $     compVal=compare(x->key, -1 *  q);
352$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery (! key);
353$  int compVal; $   char compVal;
354$    return 1; $     return 2* 1;
355$    if (z == z->parent->left) { $     if (z  <=  z->parent->left) {
356$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( ~  (!w->right->red) && (!w->left->red) ) { 
357$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*2);
358$int compare(int x, int y) { $ int compare(int x, short int y) {
359$	if (!w->right->red) { $ 	if  (! !w->right->red) {
360$    if (z == z->parent->left) { $     if (z  =  z->parent->left) {
361$  if (nil != (y = x->right)) {     while(y->left != nil) {       y=y->left; $   if (nil != (y = x->right)) {     while(y->left = nil) {       y=y->left;
362$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = 0 ;//NULL;
363$    return 0; $     return -1 * 0;
364$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( ~  (!w->right->red) && (!w->left->red) ) { 
365$    if (z == z->parent->left) { $     if (z  <=  z->parent->left) {
366$    if (z == z->parent->left) { $     if ( false && z == z->parent->left) {
367$  if (y->left != nil) y->left->parent=x;      $   if ( false && y->left != nil) y->left->parent=x;     
368$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*-1);
369$  while( (!x->red) && (root != x)) { $   while( (!x->red) && (root  >=  x)) {
370$  return RBExactQuery(key) != NULL; $   return -1; //RBExactQuery(key) != NULL;
371$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( true ||  (!w->right->red) && (!w->left->red) ) { 
372$  if (y->left != nil) y->left->parent=x;      $   if (y->left  ==  nil) y->left->parent=x;     
373$    if (z == z->parent->left) { $     if ( false && z == z->parent->left) {
374$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = NULL; //NULL;
375$  if( y == y->parent->left) { $   if( y  <=  y->parent->left) {
376$	if (!w->right->red) { $ 	if ( ! !w->right->red) {
377$	if (x == x->parent->left) { $ 	if (x  >=  x->parent->left) {
378$	if (x == x->parent->left) { $ 	if (x  >  x->parent->left) {
379$int compare(int x, int y) { $ int compare(int x, short int y) {
380$    if (z == z->parent->left) { $     if (z  <  z->parent->left) {
381$	if (!w->left->red) { $ 	if ( ~ !w->left->red) {
382$    if (y == y->parent->left) { $     if (y  !=  y->parent->left) {
383$int compare(int x, int y) { $ int compare(int x, short int y) {
384$  if (nil != x->right)  x->right->parent=y;    $   if (nil = x->right)  x->right->parent=y;   
385$int compare(int x, int y) { $ int compare(int x, char y) {
386$	if (x == x->parent->right) { $ 	if (x  <  x->parent->right) {
387$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = NULL; //NULL;
388$  int compVal; $   short int compVal;
389$      if (y == root) return(nil);  $       if (y  >  root) return(nil); 
390$       (1 == compare(y->key,z->key))) {     y->left=z; $        (1  >=  compare(y->key,z->key))) {     y->left=z;
391$  if ( (y == tree->root) || $   if ( (y  <=  tree->root) ||
392$int compare(int x, int y) { $ int compare(int x, short int y) {
393$    return 0; $     return 0; //0;
394$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) && !(!w->left->red) ) { 
395$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while(x->parent->red) {     if (x->parent  >=  x->parent->parent->left) {
396$  if (nil != x->right)  x->right->parent=y;    $   if ( false && nil != x->right)  x->right->parent=y;   
397$  if (y != z) {  $   if (y  ==  z) { 
398$    if (z == z->parent->left) { $     if (z  >  z->parent->left) {
399$  if (x == y) $   if ( ! x == y)
400$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*-1);
401$      if (w->red) { $       if  (! w->red) {
402$      if (w->red) { $       if ( ! w->red) {
403$  while( (!x->red) && (root != x)) { $   while( (!x->red) && (root  >  x)) {
404$  if ( (y == tree->root) || $   if  (!  (y == tree->root) ||
405$    return -1; $     return -1; //-1;
406$  if (y->left != nil) y->left->parent=x;      $   if (y->left  >  nil) y->left->parent=x;     
407$    while(x == y->left) {  $     while(x  >  y->left) { 
408$      if (y->red) { $       if ( true || y->red) {
409$	if (!w->left->red) { $ 	if  (! !w->left->red) {
410$  while( x != nil) { $   while( x  <=  nil) {
411$    if (z == z->parent->left) { $     if (z  =  z->parent->left) {
412$      if (y->red) { $       if  (! y->red) {
413$    if (z == z->parent->left) { $     if (z  >=  z->parent->left) {
414$    return -1; $     return 2* -1;
415$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) & (!w->left->red) ) { 
416$    while(x == y->right) {       x=y; $     while(x  <=  y->right) {       x=y;
417$  if (root == (x->parent = y->parent)) {     root->left=x; $   if ( true || root == (x->parent = y->parent)) {     root->left=x;
418$	if (x == x->parent->left) { $ 	if ( false && x == x->parent->left) {
419$  if (y != z) {  $   if (y  =  z) { 
420$  int compVal; $   short int compVal;
421$    return -1; $     return 2* -1;
422$  while( x != nil) { $   while( x  =  nil) {
423$	if (x == x->parent->left) { $ 	if (x  >  x->parent->left) {
424$  if (y->left != nil) y->left->parent=x;      $   if (y->left  >=  nil) y->left->parent=x;     
425$      if (w->red) { $       if  (! w->red) {
426$    return 0; $     return 1; //0;
427$  if (y->left != nil) y->left->parent=x;      $   if ( true || y->left != nil) y->left->parent=x;     
428$       (1 == compare(y->key,z->key))) {     y->left=z; $        (1  >  compare(y->key,z->key))) {     y->left=z;
429$      if (w->red) { $       if ( false && w->red) {
430$	if (!w->right->red) { $ 	if ( ! !w->right->red) {
431$  if (y != z) {  $   if ( true || y != z) { 
432$    return 1; $     return 2* 1;
433$  if (nil != (y = x->right)) {     while(y->left != nil) {       y=y->left; $   if ( false && nil != (y = x->right)) {     while(y->left != nil) {       y=y->left;
434$    if (y == root) return(nil); $     if (y  >  root) return(nil);
435$int compare(int x, int y) { $ int compare(int x, short int y) {
436$    while(x == y->right) {       x=y; $     while(x  >  y->right) {       x=y;
437$      if (y->red) { $       if  (! y->red) {
438$      if (w->red) { $       if ( false && w->red) {
439$      if (y->red) { $       if  (! y->red) {
440$    return 0; $     return 2* 0;
441$	if (x == x->parent->left) { $ 	if ( false && x == x->parent->left) {
442$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*0);
443$  int compVal; $   short int compVal;
444$    if ( x == nil) return(0); $     if ( x  !=  nil) return(0);
445$  if (x == y) $   if  (! x == y)
446$  if (y != z) {  $   if (y  <=  z) { 
447$      if( x == x->parent->left) { $       if( x  =  x->parent->left) {
448$    return 0; $     return -1 * 0;
449$      if (y->red) { $       if ( true || y->red) {
450$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) & (!w->left->red) ) { 
451$  while( (!x->red) && (root != x)) { $   while( (!x->red) & (root != x)) {
452$    if (z == z->parent->left) { $     if ( true || z == z->parent->left) {
453$	if (x == x->parent->right) { $ 	if (x  =  x->parent->right) {
454$  if (nil != x->right)  x->right->parent=y;    $   if (nil  >  x->right)  x->right->parent=y;   
455$	if (!w->left->red) { $ 	if  (! !w->left->red) {
456$  if (x == nil) return(0); $   if ( true || x == nil) return(0);
457$  if (x == nil) return(0); $   if (x == nil) return(0*2);
458$    compVal=compare(x->key, q); $     compVal=compare (! x->key, q);
459$  while(0 != compVal) {    if (1 == compVal) {       x=x->left; $   while(0 != compVal) {    if ( ! 1 == compVal) {       x=x->left;
460$  while(0 != compVal) {    if (1 == compVal) {       x=x->left; $   while(0 != compVal) {    if (1  >  compVal) {       x=x->left;
461$      if (y->red) { $       if ( ~ y->red) {
462$  if (nil != x->right)  x->right->parent=y;    $   if (nil  ==  x->right)  x->right->parent=y;   
463$	if (x == x->parent->right) { $ 	if (x  =  x->parent->right) {
464$      if (y->red) { $       if ( ! y->red) {
465$      if (y->red) { $       if  (! y->red) {
466$    if (!(y->red)) RBDeleteFixUp(x); $     if ( ! !(y->red)) RBDeleteFixUp(x);
467$  compVal= compare(x->key, q); $   compVal= compare (! x->key, q);
468$    if (!(y->red)) RBDeleteFixUp(x); $     if ( false && !(y->red)) RBDeleteFixUp(x);
469$      if (w->red) { $       if  (! w->red) {
470$  int compVal; $   short int compVal;
471$  while( x != nil) { $   while( x  >=  nil) {
472$  int compVal; $   char compVal;
473$  x= (y->left == nil) ? y->right : y->left; $   x= (y->left  !=  nil) ? y->right : y->left;
474$  if (nil != x->right)  x->right->parent=y;    $   if (nil = x->right)  x->right->parent=y;   
475$int compare(int x, int y) { $ int compare(int x, char y) {
476$  if ( (y == tree->root) || $   if ( !  (y == tree->root) ||
477$    if (!(y->red)) RBDeleteFixUp(x); $     if ( true || !(y->red)) RBDeleteFixUp(x);
478$  if (!z) { $   if  (! !z) {
479$    compVal=compare(x->key, q); $     compVal=compare(x->key, !  q);
480$      if( x == x->parent->left) { $       if( x  !=  x->parent->left) {
481$    return -1; $     return -1; //-1;
482$  while( x != nil) { $   while( x  <=  nil) {
483$  if (nil != (y = x->left)) {     while(y->right != nil) {       y=y->right; $   if (nil != (y = x->left)) {     while(y->right = nil) {       y=y->right;
484$  if (y->left != nil) y->left->parent=x;      $   if (y->left  =  nil) y->left->parent=x;     
485$      if (y == root) return(nil);  $       if ( true || y == root) return(nil); 
486$  if (nil != x->right)  x->right->parent=y;    $   if (nil  >  x->right)  x->right->parent=y;   
487$	if (!w->left->red) { $ 	if ( ! !w->left->red) {
488$    if (1 == compare(x->key,z->key)) {       x=x->left; $     if  (! 1 == compare(x->key,z->key)) {       x=x->left;
489$    return 0; $     return 0; //0;
490$  while( x != nil) { $   while( x  =  nil) {
491$	if (x == x->parent->left) { $ 	if (x  >=  x->parent->left) {
492$	if (x == x->parent->right) { $ 	if ( true || x == x->parent->right) {
493$  if (nil != (y = x->left)) {     while(y->right != nil) {       y=y->right; $   if (nil != (y = x->left)) {     while(y->right  =  nil) {       y=y->right;
494$  while( x != nil) { $   while( x  =  nil) {
495$    if ( x == nil) return(0); $     if ( x == nil) return(0*0);
496$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*-1);
497$      if (y->red) { $       if ( ~ y->red) {
498$  if (y->left != nil) y->left->parent=x;      $   if (y->left  >  nil) y->left->parent=x;     
499$    if (z == z->parent->left) { $     if ( false && z == z->parent->left) {
500$  return RBExactQuery(key) != NULL; $   return RBExactQuery(key)  >  NULL;
501$    while(x == y->left) {  $     while(x  =  y->left) { 
502$  while(0 != compVal) {    if (1 == compVal) {       x=x->left; $   while (! 0 != compVal) {    if (1 == compVal) {       x=x->left;
503$	if (!w->right->red) { $ 	if ( ! !w->right->red) {
504$int compare(int x, int y) { $ int compare(int x, char y) {
505$    if (y == y->parent->left) { $     if ( true || y == y->parent->left) {
506$	if (!w->right->red) { $ 	if  (! !w->right->red) {
507$      if (y->red) { $       if  (! y->red) {
508$    return -1; $     return NULL; //-1;
509$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( ~  (!w->right->red) && (!w->left->red) ) { 
510$    if (z == z->parent->left) { $     if ( false && z == z->parent->left) {
511$      if (w->red) { $       if ( ~ w->red) {
512$int compare(int x, int y) { $ int compare(int x, short int y) {
513$    if ( x == nil) return(0); $     if ( x == nil) return(0*0);
514$       (1 == compare(y->key,z->key))) {     y->left=z; $        (1 == compare(y->key, ! z->key))) {     y->left=z;
515$    if ( x == nil) return(0); $     if ( x  <=  nil) return(0);
516$  if (y->left != nil) y->left->parent=x;      $   if (y->left  >=  nil) y->left->parent=x;     
517$    if (z == z->parent->left) { $     if (z  <=  z->parent->left) {
518$  while(0 != compVal) {    if (1 == compVal) {       x=x->left; $   while(0 != compVal) {    if ( ~ 1 == compVal) {       x=x->left;
519$	if (!w->right->red) { $ 	if  (! !w->right->red) {
520$  if (root == (x->parent = y->parent)) {     root->left=x; $   if ( true || root == (x->parent = y->parent)) {     root->left=x;
521$  if (nil != (y = x->right)) {     while(y->left != nil) {       y=y->left; $   if (nil != (y = x->right)) {     while(y->left = nil) {       y=y->left;
522$    return 1; $     return NULL; //1;
523$  while( (!x->red) && (root != x)) { $   while( (!x->red) && (root = x)) {
524$  if (nil != x->right)  x->right->parent=y;    $   if (nil  >  x->right)  x->right->parent=y;   
525$      if( x == x->parent->left) { $       if( x  <  x->parent->left) {
526$    if (z == z->parent->left) { $     if (z  >=  z->parent->left) {
527$	if (!w->left->red) { $ 	if  (! !w->left->red) {
528$  if (!z) { $   if ( false && !z) {
529$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( true ||  (!w->right->red) && (!w->left->red) ) { 
530$    return 1; $     return 0; //1;
531$      if (y->red) { $       if  (! y->red) {
532$  while( x != nil) { $   while( x = nil) {
533$  while( (!x->red) && (root != x)) { $   while( (!x->red) && !(root != x)) {
534$  if (x == y) $   if  (! x == y)
535$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left  >  nil) || (z->right == nil)) ? z : TreeSuccessor(z);
536$    return -1; $     return 2* -1;
537$  if (nil != x->right)  x->right->parent=y;    $   if ( false && nil != x->right)  x->right->parent=y;   
538$    if ( x == nil) return(0); $     if ( false &&  x == nil) return(0);
539$  if ( (y == tree->root) || $   if ( (y  =  tree->root) ||
540$    if (y == y->parent->left) { $     if ( true || y == y->parent->left) {
541$    if (!(y->red)) RBDeleteFixUp(x); $     if  (! !(y->red)) RBDeleteFixUp(x);
542$	if (!w->left->red) { $ 	if ( true || !w->left->red) {
543$    if (!(y->red)) RBDeleteFixUp(x); $     if (! (! y->red)) RBDeleteFixUp(x);
544$  compVal= compare(x->key, q); $   compVal= compare(x->key, 0 *  q);
545$	if (!w->left->red) { $ 	if  (! !w->left->red) {
546$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*2);
547$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) || (z->right == nil)) && false ? z : TreeSuccessor(z);
548$    while(x == y->right) {       x=y; $     while(x  >  y->right) {       x=y;
549$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( false &&  (!w->right->red) && (!w->left->red) ) { 
550$    return 0; $     return NULL; //0;
551$    if ( x == nil) return(0); $     if ( x  >  nil) return(0);
552$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*-1);
553$    while(x == y->left) {  $     while(x  !=  y->left) { 
554$    if (!(y->red)) RBDeleteFixUp(x); $     if ( ~ !(y->red)) RBDeleteFixUp(x);
555$  if (nil != x->right)  x->right->parent=y;    $   if (nil = x->right)  x->right->parent=y;   
556$    if (y == y->parent->left) { $     if (y  =  y->parent->left) {
557$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) || (z->right == nil)) && false ? z : TreeSuccessor(z);
558$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) && !(!w->left->red) ) { 
559$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) && (z->right == nil)) ? z : TreeSuccessor(z);
560$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = 0 ;//NULL;
561$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery (! key);
562$int compare(int x, int y) { $ int compare(int x, short int y) {
563$    if (z == z->parent->left) { $     if (z  <  z->parent->left) {
564$    if (1 == compare(x->key,z->key)) {       x=x->left; $     if (1  !=  compare(x->key,z->key)) {       x=x->left;
565$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) | (z->right == nil)) ? z : TreeSuccessor(z);
566$  if ( (y == tree->root) || $   if  (!  (y == tree->root) ||
567$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) &&  (! !w->left->red) ) { 
568$  while( (!x->red) && (root != x)) { $   while( (!x->red) && (root  >  x)) {
569$      if (w->red) { $       if ( ! w->red) {
570$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery (! key);
571$	if (x == x->parent->left) { $ 	if (x  <=  x->parent->left) {
572$  if (root == (x->parent = y->parent)) {     root->left=x; $   if (root  <=  (x->parent = y->parent)) {     root->left=x;
573$    if (z == z->parent->left) { $     if (z  >  z->parent->left) {
574$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y=  (! (z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z);
575$    if (y == y->parent->left) { $     if (y  >=  y->parent->left) {
576$  if (nil != (y = x->left)) {     while(y->right != nil) {       y=y->right; $   if (nil != (y = x->left)) {     while(y->right  =  nil) {       y=y->right;
577$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) || (z->right == nil)) && false ? z : TreeSuccessor(z);
578$      if (y->red) { $       if ( ~ y->red) {
579$  int compVal; $   short int compVal;
580$      if (w->red) { $       if ( ! w->red) {
581$  if (nil != (y = x->right)) {     while(y->left != nil) {       y=y->left; $   if (nil  =  (y = x->right)) {     while(y->left != nil) {       y=y->left;
582$      if (w->red) { $       if  (! w->red) {
583$      if (w->red) { $       if  (! w->red) {
584$  int compVal; $   short int compVal;
585$	if (x == x->parent->right) { $ 	if (x  !=  x->parent->right) {
586$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( false &&  (!w->right->red) && (!w->left->red) ) { 
587$  while( x != nil) { $   while( x  >=  nil) {
588$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while(x->parent->red) {     if ( true || x->parent == x->parent->parent->left) {
589$      if (y->red) { $       if ( false && y->red) {
590$      if (y->red) { $       if  (! y->red) {
591$	if (!w->right->red) { $ 	if ( false && !w->right->red) {
592$int compare(int x, int y) { $ int compare(int x, short int y) {
593$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y=  (! (z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z);
594$    return -1; $     return NULL; //-1;
595$int compare(int x, int y) { $ int compare(int x, short int y) {
596$	if (!w->left->red) { $ 	if ( ! !w->left->red) {
597$    if (1 == compare(x->key,z->key)) {       x=x->left; $     if ( false && 1 == compare(x->key,z->key)) {       x=x->left;
598$  while( x != nil) { $   while( x = nil) {
599$      if (y->red) { $       if ( ~ y->red) {
600$      if (w->red) { $       if ( false && w->red) {
601$    if (x == x->parent->left) { $     if (x  >=  x->parent->left) {
602$int compare(int x, int y) { $ int compare(int x, char y) {
603$	if (!w->left->red) { $ 	if  (! !w->left->red) {
604$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) & (!w->left->red) ) { 
605$  if (y->left != nil) y->left->parent=x;      $   if (y->left  =  nil) y->left->parent=x;     
606$  int compVal; $   char compVal;
607$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*0);
608$    if ( x == nil) return(0); $     if ( x == nil) return(0*0);
609$  if (x == y) $   if ( ~ x == y)
610$  if (nil != (y = x->right)) {     while(y->left != nil) {       y=y->left; $   if (nil  <=  (y = x->right)) {     while(y->left != nil) {       y=y->left;
611$    while(x == y->right) {       x=y; $     while(x  <=  y->right) {       x=y;
612$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) || !(z->right == nil)) ? z : TreeSuccessor(z);
613$int compare(int x, int y) { $ int compare(int x, short int y) {
614$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left  <=  nil) || (z->right == nil)) ? z : TreeSuccessor(z);
615$  if (nil != (y = x->left)) {     while(y->right != nil) {       y=y->right; $   if (nil  <  (y = x->left)) {     while(y->right != nil) {       y=y->right;
616$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery (! key);
617$  while( x != nil) { $   while( x  >  nil) {
618$    if (z == z->parent->left) { $     if (z  <=  z->parent->left) {
619$  if (nil != (y = x->right)) {     while(y->left != nil) {       y=y->left; $   if ( false && nil != (y = x->right)) {     while(y->left != nil) {       y=y->left;
620$      if (y->red) { $       if ( ~ y->red) {
621$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) &&  (! !w->left->red) ) { 
622$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) || (z->right == nil)) || true ? z : TreeSuccessor(z);
623$  if (nil != x->right)  x->right->parent=y;    $   if ( true || nil != x->right)  x->right->parent=y;   
624$int compare(int x, int y) { $ int compare(int x, short int y) {
625$    if (1 == compare(x->key,z->key)) {       x=x->left; $     if (1 == compare (! x->key,z->key)) {       x=x->left;
626$      if( x == x->parent->left) { $       if( x  >  x->parent->left) {
627$      if (w->red) { $       if  (! w->red) {
628$  while( x != nil) { $   while( x  ==  nil) {
629$	if (!w->right->red) { $ 	if  (! !w->right->red) {
630$	if (x == x->parent->left) { $ 	if (x  >=  x->parent->left) {
631$      if ( (!w->right->red) && (!w->left->red) ) {  $       if  (!  (!w->right->red) && (!w->left->red) ) { 
632$	if (!w->left->red) { $ 	if ( ! !w->left->red) {
633$int compare(int x, int y) { $ int compare(int x, short int y) {
634$  while( (!x->red) && (root != x)) { $   while( (!x->red) && !(root != x)) {
635$  if (y->left != nil) y->left->parent=x;      $   if (y->left = nil) y->left->parent=x;     
636$    if ( x == nil) return(0); $     if ( x  >  nil) return(0);
637$  while( (!x->red) && (root != x)) { $   while( (!x->red) && !(root != x)) {
638$      if (w->red) { $       if  (! w->red) {
639$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*2);
640$  if( y == y->parent->left) { $   if( y  <=  y->parent->left) {
641$    return 1; $     return 1; //1;
642$  int compVal; $   short int compVal;
643$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = 0 ;//NULL;
644$	if (!w->left->red) { $ 	if  (! !w->left->red) {
645$    if (!(y->red)) RBDeleteFixUp(x); $     if  (! !(y->red)) RBDeleteFixUp(x);
646$  if( y == y->parent->left) { $   if( y  <=  y->parent->left) {
647$	if (!w->left->red) { $ 	if ( true || !w->left->red) {
648$  int compVal; $   short int compVal;
649$  while( x != nil) { $   while( x  <=  nil) {
650$    if ( x == nil) return(0); $     if ( x  =  nil) return(0);
651$	if (x == x->parent->right) { $ 	if (x  <=  x->parent->right) {
652$    if (z == z->parent->left) { $     if (z  =  z->parent->left) {
653$  if (nil != x->right)  x->right->parent=y;    $   if (nil = x->right)  x->right->parent=y;   
654$int compare(int x, int y) { $ int compare(int x, char y) {
655$      if ( (!w->right->red) && (!w->left->red) ) {  $       if  (!  (!w->right->red) && (!w->left->red) ) { 
656$int compare(int x, int y) { $ int compare(int x, short int y) {
657$  if (y->left != nil) y->left->parent=x;      $   if (y->left  ==  nil) y->left->parent=x;     
658$    if (z == z->parent->left) { $     if ( false && z == z->parent->left) {
659$  while( (!x->red) && (root != x)) { $   while( (!x->red) && !(root != x)) {
660$    return 1; $     return 1; //1;
661$	if (!w->left->red) { $ 	if ( ~ !w->left->red) {
662$  while( (!x->red) && (root != x)) { $   while (!  (!x->red) && (root != x)) {
663$    if (y == y->parent->left) { $     if (y  >  y->parent->left) {
664$  if (nil != (y = x->left)) {     while(y->right != nil) {       y=y->right; $   if (nil  >=  (y = x->left)) {     while(y->right != nil) {       y=y->right;
665$  if ( (y == tree->root) || $   if ( (y  >=  tree->root) ||
666$    while(x == y->left) {  $     while(x  <=  y->left) { 
667$    return 1; $     return 0; //1;
668$	if (!w->right->red) { $ 	if  (! !w->right->red) {
669$  compVal= compare(x->key, q); $   compVal= compare(x->key, q*-1);
670$	if (!w->left->red) { $ 	if  (! !w->left->red) {
671$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = NULL; //NULL;
672$  if (nil != x->right)  x->right->parent=y;    $   if ( false && nil != x->right)  x->right->parent=y;   
673$  if (y->left != nil) y->left->parent=x;      $   if (y->left  ==  nil) y->left->parent=x;     
674$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*2);
675$	if (!w->left->red) { $ 	if  (! !w->left->red) {
676$  if (!z) { $   if  (! !z) {
677$      if (w->red) { $       if  (! w->red) {
678$  x= (y->left == nil) ? y->right : y->left; $   x= (y->left  =  nil) ? y->right : y->left;
679$    compVal=compare(x->key, q); $     compVal=compare(x->key, !  q);
680$    if (1 == compare(x->key,z->key)) {       x=x->left; $     if  (! 1 == compare(x->key,z->key)) {       x=x->left;
681$      if (w->red) { $       if  (! w->red) {
682$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = 0 * NULL;
683$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( true ||  (!w->right->red) && (!w->left->red) ) { 
684$      if (w->red) { $       if ( ~ w->red) {
685$      if (w->red) { $       if ( ! w->red) {
686$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) & (!w->left->red) ) { 
687$    return 0; $     return -1 * 0;
688$  if (!z) { $   if ( true || !z) {
689$int compare(int x, int y) { $ int compare(int x, char y) {
690$      if (y == root) return(nil);  $       if (y  !=  root) return(nil); 
691$    if ( x == nil) return(0); $     if ( x  >  nil) return(0);
692$int compare(int x, int y) { $ int compare(int x, char y) {
693$  if (y->left != nil) y->left->parent=x;      $   if ( true || y->left != nil) y->left->parent=x;     
694$int compare(int x, int y) { $ int compare(int x, short int y) {
695$  if (nil != (y = x->right)) {     while(y->left != nil) {       y=y->left; $   if ( false && nil != (y = x->right)) {     while(y->left != nil) {       y=y->left;
696$  compVal= compare(x->key, q); $   compVal= compare(x->key, q*-1);
697$	if (!w->right->red) { $ 	if ( ! !w->right->red) {
698$  if (y != z) {  $   if (y  =  z) { 
699$	if (x == x->parent->right) { $ 	if (x  !=  x->parent->right) {
700$  while( (!x->red) && (root != x)) { $   while(  (! !x->red) && (root != x)) {
701$    return 1; $     return 2* 1;
702$    if (z == z->parent->left) { $     if ( false && z == z->parent->left) {
703$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = 0 * NULL;
704$int compare(int x, int y) { $ int compare(int x, char y) {
705$	if (!w->left->red) { $ 	if ( ! !w->left->red) {
706$    if (!(y->red)) RBDeleteFixUp(x); $     if ( false && !(y->red)) RBDeleteFixUp(x);
707$  if ( (y == tree->root) || $   if ( false &&  (y == tree->root) ||
708$	if (x == x->parent->left) { $ 	if (x  =  x->parent->left) {
709$    if ( x == nil) return(0); $     if ( x == nil) return(0*0);
710$  while( (!x->red) && (root != x)) { $   while( (!x->red) && (root = x)) {
711$  if ( (y == tree->root) || $   if ( !  (y == tree->root) ||
712$  while( (!x->red) && (root != x)) { $   while( (!x->red) && (root  <  x)) {
713$	if (!w->right->red) { $ 	if ( false && !w->right->red) {
714$	if (x == x->parent->right) { $ 	if ( true || x == x->parent->right) {
715$  while( (!x->red) && (root != x)) { $   while( (!x->red) && (root  >  x)) {
716$	if (!w->left->red) { $ 	if ( false && !w->left->red) {
717$      if ( (!w->right->red) && (!w->left->red) ) {  $       if (  (! !w->right->red) && (!w->left->red) ) { 
718$  while( x != nil) { $   while( x  =  nil) {
719$  while( x != nil) { $   while( x = nil) {
720$  while( x != nil) { $   while( x  >=  nil) {
721$  if (y->left != nil) y->left->parent=x;      $   if ( true || y->left != nil) y->left->parent=x;     
722$      if (w->red) { $       if ( ! w->red) {
723$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery (! key);
724$    while(x == y->left) {  $     while(x  >  y->left) { 
725$  if (y->left != nil) y->left->parent=x;      $   if (y->left = nil) y->left->parent=x;     
726$    while(x == y->right) {       x=y; $     while(x  >=  y->right) {       x=y;
727$  while( (!x->red) && (root != x)) { $   while( (!x->red) && (root  <=  x)) {
728$	if (x == x->parent->right) { $ 	if (x  <=  x->parent->right) {
729$  if (y->left != nil) y->left->parent=x;      $   if (y->left  >  nil) y->left->parent=x;     
730$int compare(int x, int y) { $ int compare(int x, char y) {
731$      if ( (!w->right->red) && (!w->left->red) ) {  $       if (  (! !w->right->red) && (!w->left->red) ) { 
732$int compare(int x, int y) { $ int compare(int x, short int y) {
733$  if (!z) { $   if ( false && !z) {
734$  if (nil != (y = x->left)) {     while(y->right != nil) {       y=y->right; $   if ( false && nil != (y = x->left)) {     while(y->right != nil) {       y=y->right;
735$  if (y != z) {  $   if (y  =  z) { 
736$  int compVal; $   char compVal;
737$      if (y->red) { $       if ( ! y->red) {
738$  if (nil != x->right)  x->right->parent=y;    $   if ( false && nil != x->right)  x->right->parent=y;   
739$      if ( (!w->right->red) && (!w->left->red) ) {  $       if (  (! !w->right->red) && (!w->left->red) ) { 
740$    if (z == z->parent->left) { $     if ( true || z == z->parent->left) {
741$	if (x == x->parent->right) { $ 	if ( false && x == x->parent->right) {
742$  int compVal; $   short int compVal;
743$      if (y->red) { $       if ( ! y->red) {
744$  int compVal; $   short int compVal;
745$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( ~  (!w->right->red) && (!w->left->red) ) { 
746$    return 1; $     return 2* 1;
747$    if (x == x->parent->left) { $     if (x  !=  x->parent->left) {
748$    return 1; $     return -1 * 1;
749$    if (1 == compare(x->key,z->key)) {       x=x->left; $     if (1 == compare(x->key, ! z->key)) {       x=x->left;
750$  if (nil != (y = x->right)) {     while(y->left != nil) {       y=y->left; $   if (nil != (y = x->right)) {     while(y->left  <  nil) {       y=y->left;
751$    return 1; $     return 0; //1;
752$    if (!(y->red)) RBDeleteFixUp(x); $     if ( true || !(y->red)) RBDeleteFixUp(x);
753$	if (x == x->parent->right) { $ 	if (x  >  x->parent->right) {
754$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while(x->parent->red) {     if ( true || x->parent == x->parent->parent->left) {
755$	if (!w->left->red) { $ 	if ( false && !w->left->red) {
756$  if (x == nil) return(0); $   if (x  >  nil) return(0);
757$	if (x == x->parent->right) { $ 	if (x  <  x->parent->right) {
758$      if (y->red) { $       if  (! y->red) {
759$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = NULL; //NULL;
760$      if ( (!w->right->red) && (!w->left->red) ) {  $       if (  (! !w->right->red) && (!w->left->red) ) { 
761$      if (w->red) { $       if ( ! w->red) {
762$	if (!w->right->red) { $ 	if  (! !w->right->red) {
763$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = NULL; //NULL;
764$      if (y->red) { $       if  (! y->red) {
765$int compare(int x, int y) { $ int compare(int x, short int y) {
766$	if (x == x->parent->left) { $ 	if ( true || x == x->parent->left) {
767$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = 0 * NULL;
768$  if (x == nil) return(0); $   if (x == nil) return(0*2);
769$  while( x != nil) { $   while( x = nil) {
770$  int compVal; $   short int compVal;
771$	if (x == x->parent->right) { $ 	if (x  <=  x->parent->right) {
772$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) || (z->right == nil)) && false ? z : TreeSuccessor(z);
773$  if (nil != (y = x->right)) {     while(y->left != nil) {       y=y->left; $   if (nil != (y = x->right)) {     while(y->left  <  nil) {       y=y->left;
774$  while( (!x->red) && (root != x)) { $   while( (!x->red) && (root = x)) {
775$int compare(int x, int y) { $ int compare(int x, char y) {
776$  if (nil != x->right)  x->right->parent=y;    $   if (nil  <  x->right)  x->right->parent=y;   
777$  if (x == y) $   if  (! x == y)
778$      if (y->red) { $       if ( true || y->red) {
779$  x= (y->left == nil) ? y->right : y->left; $   x= (y->left == nil) || true ? y->right : y->left;
780$  while( (!x->red) && (root != x)) { $   while( (!x->red) || (root != x)) {
781$	if (!w->left->red) { $ 	if  (! !w->left->red) {
782$  if (nil != (y = x->right)) {     while(y->left != nil) {       y=y->left; $   if (nil != (y = x->right)) {     while(y->left  <=  nil) {       y=y->left;
783$	if (!w->left->red) { $ 	if  (! !w->left->red) {
784$  if (y != z) {  $   if (y = z) { 
785$      if ( (!w->right->red) && (!w->left->red) ) {  $       if  (!  (!w->right->red) && (!w->left->red) ) { 
786$      if (y->red) { $       if ( false && y->red) {
787$  if (nil != (y = x->right)) {     while(y->left != nil) {       y=y->left; $   if (nil != (y = x->right)) {     while(y->left  >=  nil) {       y=y->left;
788$	if (x == x->parent->right) { $ 	if ( false && x == x->parent->right) {
789$  while( (!x->red) && (root != x)) { $   while( (!x->red) || (root != x)) {
790$      if (y->red) { $       if ( ~ y->red) {
791$int compare(int x, int y) { $ int compare(int x, short int y) {
792$    if (z == z->parent->left) { $     if (z  >  z->parent->left) {
793$      if (y->red) { $       if ( ~ y->red) {
794$  if ( (y == tree->root) || $   if ( (y  <=  tree->root) ||
795$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*2);
796$  while( (!x->red) && (root != x)) { $   while( (!x->red) && (root = x)) {
797$  if ( (y == tree->root) || $   if  (!  (y == tree->root) ||
798$  if ( (y == tree->root) || $   if ( (y  =  tree->root) ||
799$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery (! key);
800$	if (!w->left->red) { $ 	if ( ! !w->left->red) {
801$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = NULL; //RBExactQuery(key);
802$	if (!w->left->red) { $ 	if  (! !w->left->red) {
803$  if (y->left != nil) y->left->parent=x;      $   if (y->left  <=  nil) y->left->parent=x;     
804$    if ( x == nil) return(0); $     if ( x == nil) return(0*-1);
805$  if (y->left != nil) y->left->parent=x;      $   if ( true || y->left != nil) y->left->parent=x;     
806$    if (!(y->red)) RBDeleteFixUp(x); $     if ( ~ !(y->red)) RBDeleteFixUp(x);
807$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) & (!w->left->red) ) { 
808$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left  >=  nil) || (z->right == nil)) ? z : TreeSuccessor(z);
809$    if (!(y->red)) RBDeleteFixUp(x); $     if ( ! !(y->red)) RBDeleteFixUp(x);
810$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = 0 ;//NULL;
811$	if (!w->right->red) { $ 	if ( false && !w->right->red) {
812$    while(x == y->left) {  $     while(x  >=  y->left) { 
813$  if (y != z) {  $   if (y = z) { 
814$  if ( (y == tree->root) || $   if ( (y  !=  tree->root) ||
815$    if (!(y->red)) RBDeleteFixUp(x); $     if  (! !(y->red)) RBDeleteFixUp(x);
816$    compVal=compare(x->key, q); $     compVal=compare(x->key, q*2);
817$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while(x->parent->red) {     if (x->parent  <  x->parent->parent->left) {
818$  if (nil != (y = x->left)) {     while(y->right != nil) {       y=y->right; $   if (nil != (y = x->left)) {     while(y->right  <  nil) {       y=y->right;
819$  if ( (y == tree->root) || $   if  (!  (y == tree->root) ||
820$	if (x == x->parent->left) { $ 	if ( true || x == x->parent->left) {
821$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*0);
822$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) || (!w->left->red) ) { 
823$  if ( (y == tree->root) || $   if ( true ||  (y == tree->root) ||
824$	if (x == x->parent->right) { $ 	if (x  !=  x->parent->right) {
825$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) || (z->right == nil)) && false ? z : TreeSuccessor(z);
826$  if( y == y->parent->left) { $   if( y  !=  y->parent->left) {
827$	if (!w->right->red) { $ 	if ( ~ !w->right->red) {
828$       (1 == compare(y->key,z->key))) {     y->left=z; $        (1 == compare (! y->key,z->key))) {     y->left=z;
829$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while(x->parent->red) {     if (x->parent  <  x->parent->parent->left) {
830$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( true ||  (!w->right->red) && (!w->left->red) ) { 
831$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*2);
832$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*2);
833$    while(x == y->left) {  $     while(x  <  y->left) { 
834$int compare(int x, int y) { $ int compare(int x, short int y) {
835$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*-1);
836$    if (z == z->parent->left) { $     if ( false && z == z->parent->left) {
837$      if (y->red) { $       if  (! y->red) {
838$	if (!w->left->red) { $ 	if  (! !w->left->red) {
839$    while(x == y->left) {  $     while(x  <  y->left) { 
840$    if (x == x->parent->left) { $     if (x  !=  x->parent->left) {
841$int compare(int x, int y) { $ int compare(int x, short int y) {
842$  while(0 != compVal) {    if (1 == compVal) {       x=x->left; $   while(0 != compVal) {    if ( ! 1 == compVal) {       x=x->left;
843$  if (nil != (y = x->right)) {     while(y->left != nil) {       y=y->left; $   if (nil  >=  (y = x->right)) {     while(y->left != nil) {       y=y->left;
844$    if (!(y->red)) RBDeleteFixUp(x); $     if ( ! !(y->red)) RBDeleteFixUp(x);
845$    if (!(y->red)) RBDeleteFixUp(x); $     if ( ~ !(y->red)) RBDeleteFixUp(x);
846$  int compVal; $   char compVal;
847$	if (x == x->parent->right) { $ 	if (x  >=  x->parent->right) {
848$    if (!(y->red)) RBDeleteFixUp(x); $     if  (! !(y->red)) RBDeleteFixUp(x);
849$       (1 == compare(y->key,z->key))) {     y->left=z; $        (1 == compare (! y->key,z->key))) {     y->left=z;
850$      if (y->red) { $       if  (! y->red) {
851$  if (nil != x->right)  x->right->parent=y;    $   if (nil = x->right)  x->right->parent=y;   
852$  if (x == y) $   if  (! x == y)
853$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) &&  (! !w->left->red) ) { 
854$    if ( x == nil) return(0); $     if ( x  <  nil) return(0);
855$      if (y->red) { $       if  (! y->red) {
856$    if (y == root) return(nil); $     if ( true || y == root) return(nil);
857$      if (w->red) { $       if  (! w->red) {
858$	if (!w->left->red) { $ 	if  (! !w->left->red) {
859$  if ( (y == tree->root) || $   if ( false &&  (y == tree->root) ||
860$      if (w->red) { $       if  (! w->red) {
861$  if (nil != x->right)  x->right->parent=y;    $   if ( false && nil != x->right)  x->right->parent=y;   
862$	if (!w->left->red) { $ 	if  (! !w->left->red) {
863$	if (x == x->parent->left) { $ 	if (x  <  x->parent->left) {
864$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) & (!w->left->red) ) { 
865$  while( (!x->red) && (root != x)) { $   while( (!x->red) && (root  ==  x)) {
866$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) || (z->right == nil)) || true ? z : TreeSuccessor(z);
867$      if( x == x->parent->left) { $       if( x  =  x->parent->left) {
868$  if (y->left != nil) y->left->parent=x;      $   if (y->left  <=  nil) y->left->parent=x;     
869$    if (y == y->parent->left) { $     if ( true || y == y->parent->left) {
870$    if (y == root) return(nil); $     if (y  <  root) return(nil);
871$    if (!(y->red)) RBDeleteFixUp(x); $     if ( false && !(y->red)) RBDeleteFixUp(x);
872$	if (!w->left->red) { $ 	if ( true || !w->left->red) {
873$  int compVal; $   char compVal;
874$	if (!w->left->red) { $ 	if  (! !w->left->red) {
875$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = 0 ;//NULL;
876$  int compVal; $   short int compVal;
877$      if( x == x->parent->left) { $       if( x  !=  x->parent->left) {
878$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = 0 * NULL;
879$	if (!w->right->red) { $ 	if  (! !w->right->red) {
880$    if (!(y->red)) RBDeleteFixUp(x); $     if (! (! y->red)) RBDeleteFixUp(x);
881$    return -1; $     return -1 * -1;
882$      if (y->red) { $       if ( true || y->red) {
883$    while(x == y->right) {       x=y; $     while(x  <=  y->right) {       x=y;
884$    if (!(y->red)) RBDeleteFixUp(x); $     if ( false && !(y->red)) RBDeleteFixUp(x);
885$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) || (z->right  >  nil)) ? z : TreeSuccessor(z);
886$	if (x == x->parent->right) { $ 	if (x  <  x->parent->right) {
887$  else if (x > y) $   else if (x != y)
888$	if (!w->right->red) { $ 	if ( true || !w->right->red) {
889$  if (nil != (y = x->right)) {     while(y->left != nil) {       y=y->left; $   if (nil = (y = x->right)) {     while(y->left != nil) {       y=y->left;
890$    if (z == z->parent->left) { $     if (z  !=  z->parent->left) {
891$  if (y->left != nil) y->left->parent=x;      $   if (y->left  =  nil) y->left->parent=x;     
892$int compare(int x, int y) { $ int compare(int x, short int y) {
893$    return 0; $     return -1 * 0;
894$    if ( x == nil) return(0); $     if ( x == nil) return(0*0);
895$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while (! x->parent->red) {     if (x->parent == x->parent->parent->left) {
896$  while(0 != compVal) {    if (1 == compVal) {       x=x->left; $   while(0 != compVal) {    if  (! 1 == compVal) {       x=x->left;
897$  while(0 != compVal) {    if (1 == compVal) {       x=x->left; $   while(0 != compVal) {    if (1  !=  compVal) {       x=x->left;
898$	if (!w->left->red) { $ 	if ( false && !w->left->red) {
899$    if (z == z->parent->left) { $     if (z  <=  z->parent->left) {
900$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while (! x->parent->red) {     if (x->parent == x->parent->parent->left) {
901$      if( x == x->parent->left) { $       if( x  >  x->parent->left) {
902$  while(0 != compVal) {    if (1 == compVal) {       x=x->left; $   while(0  >=  compVal) {    if (1 == compVal) {       x=x->left;
903$	if (x == x->parent->left) { $ 	if (x  <=  x->parent->left) {
904$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while(x->parent->red) {     if ( false && x->parent == x->parent->parent->left) {
905$  if ( (y == tree->root) || $   if  (!  (y == tree->root) ||
906$	if (!w->right->red) { $ 	if  (! !w->right->red) {
907$  if (y != z) {  $   if (y  ==  z) { 
908$	if (x == x->parent->right) { $ 	if (x  <  x->parent->right) {
909$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while (! x->parent->red) {     if (x->parent == x->parent->parent->left) {
910$  while( x != nil) { $   while( x = nil) {
911$  if (y != z) {  $   if (y  <=  z) { 
912$  if (nil != x->right)  x->right->parent=y;    $   if (nil  >  x->right)  x->right->parent=y;   
913$      if( x == x->parent->left) { $       if( x  >  x->parent->left) {
914$    while(x == y->left) {  $     while(x  >=  y->left) { 
915$    if (1 == compare(x->key,z->key)) {       x=x->left; $     if (1 == compare(x->key, 0 * z->key)) {       x=x->left;
916$      if (y->red) { $       if ( false && y->red) {
917$    if (z == z->parent->left) { $     if (z  <=  z->parent->left) {
918$  if (x == y) $   if ( true || x == y)
919$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while(x->parent->red) {     if (x->parent  <=  x->parent->parent->left) {
920$    return -1; $     return 2* -1;
921$      if (y->red) { $       if  (! y->red) {
922$	if (x == x->parent->left) { $ 	if ( true || x == x->parent->left) {
923$	if (x == x->parent->right) { $ 	if (x  =  x->parent->right) {
924$  while( (!x->red) && (root != x)) { $   while( (!x->red) && (root  >=  x)) {
925$  if (nil != x->right)  x->right->parent=y;    $   if (nil  <  x->right)  x->right->parent=y;   
926$  if (y != z) {  $   if (y = z) { 
927$  if (y != z) {  $   if (y  >=  z) { 
928$  if (x == y) $   if (x  <=  y)
929$  while( x != nil) { $   while( x = nil) {
930$int compare(int x, int y) { $ int compare(int x, short int y) {
931$	if (x == x->parent->left) { $ 	if (x  <=  x->parent->left) {
932$      if (y->red) { $       if  (! y->red) {
933$	if (!w->left->red) { $ 	if ( ~ !w->left->red) {
934$      if (y->red) { $       if ( ! y->red) {
935$  if ( (y == tree->root) || $   if ( false &&  (y == tree->root) ||
936$      if (w->red) { $       if ( ! w->red) {
937$	if (x == x->parent->left) { $ 	if (x  >  x->parent->left) {
938$	if (!w->right->red) { $ 	if  (! !w->right->red) {
939$    if ( x == nil) return(0); $     if ( x  <=  nil) return(0);
940$  rb_red_blk_node* z = RBExactQuery(key); $   rb_red_blk_node* z = RBExactQuery(key*-1);
941$    if (1 == compare(x->key,z->key)) {       x=x->left; $     if  (! 1 == compare(x->key,z->key)) {       x=x->left;
942$  if (y->left != nil) y->left->parent=x;      $   if (y->left  >  nil) y->left->parent=x;     
943$  if (root == (x->parent = y->parent)) {     root->left=x; $   if ( false && root == (x->parent = y->parent)) {     root->left=x;
944$    if (1 == compare(x->key,z->key)) {       x=x->left; $     if (1  !=  compare(x->key,z->key)) {       x=x->left;
945$       (1 == compare(y->key,z->key))) {     y->left=z; $        (1 == compare(y->key, ! z->key))) {     y->left=z;
946$    if ( x == nil) return(0); $     if ( x == nil) return(0*2);
947$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = NULL; //NULL;
948$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( true ||  (!w->right->red) && (!w->left->red) ) { 
949$      if (w->red) { $       if  (! w->red) {
950$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) & (!w->left->red) ) { 
951$    compVal=compare(x->key, q); $     compVal=compare (! x->key, q);
952$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while(x->parent->red) {     if (x->parent  <=  x->parent->parent->left) {
953$int compare(int x, int y) { $ int compare(int x, short int y) {
954$	if (!w->right->red) { $ 	if ( ! !w->right->red) {
955$    if (y == root) return(nil); $     if (y  <=  root) return(nil);
956$      if (w->red) { $       if  (! w->red) {
957$  int compVal; $   short int compVal;
958$rb_red_blk_tree* tree = NULL; $ rb_red_blk_tree* tree = NULL; //NULL;
959$  if ( (y == tree->root) || $   if  (!  (y == tree->root) ||
960$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( ~  (!w->right->red) && (!w->left->red) ) { 
961$int compare(int x, int y) { $ int compare(int x, short int y) {
962$	if (!w->right->red) { $ 	if  (! !w->right->red) {
963$    if (!(y->red)) RBDeleteFixUp(x); $     if ( ~ !(y->red)) RBDeleteFixUp(x);
964$    if (!(y->red)) RBDeleteFixUp(x); $     if ( true || !(y->red)) RBDeleteFixUp(x);
965$  if (nil != x->right)  x->right->parent=y;    $   if ( false && nil != x->right)  x->right->parent=y;   
966$  if ( (y == tree->root) || $   if ( (y  <=  tree->root) ||
967$  if (y != z) {  $   if (y = z) { 
968$  if (x == y) $   if  (! x == y)
969$  if ( (y == tree->root) || $   if ( (y  =  tree->root) ||
970$  if (nil != (y = x->left)) {     while(y->right != nil) {       y=y->right; $   if (nil  <  (y = x->left)) {     while(y->right != nil) {       y=y->right;
971$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) || (!w->left->red) ) { 
972$	if (x == x->parent->left) { $ 	if ( true || x == x->parent->left) {
973$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while(x->parent->red) {     if (x->parent  =  x->parent->parent->left) {
974$    while(x == y->left) {  $     while(x  !=  y->left) { 
975$  if (nil != x->right)  x->right->parent=y;    $   if (nil  <=  x->right)  x->right->parent=y;   
976$	if (!w->right->red) { $ 	if  (! !w->right->red) {
977$      if (y->red) { $       if ( ~ y->red) {
978$  while( (!x->red) && (root != x)) { $   while( (!x->red) && (root = x)) {
979$  if ( (y == tree->root) || $   if  (!  (y == tree->root) ||
980$  if (y != z) {  $   if (y  <=  z) { 
981$  if (y->left != nil) y->left->parent=x;      $   if ( false && y->left != nil) y->left->parent=x;     
982$    if (z == z->parent->left) { $     if ( false && z == z->parent->left) {
983$      if (y->red) { $       if ( ! y->red) {
984$  x= (y->left == nil) ? y->right : y->left; $   x= (y->left  >  nil) ? y->right : y->left;
985$  while( x != nil) { $   while( x  =  nil) {
986$  while( (!x->red) && (root != x)) { $   while( (!x->red) || (root != x)) {
987$  while(x->parent->red) {     if (x->parent == x->parent->parent->left) { $   while(x->parent->red) {     if (x->parent  <  x->parent->parent->left) {
988$    if (z == z->parent->left) { $     if (z  <=  z->parent->left) {
989$  while(0 != compVal) {    if (1 == compVal) {       x=x->left; $   while(0 != compVal) {    if ( ~ 1 == compVal) {       x=x->left;
990$  if (root == (x->parent = y->parent)) {     root->left=x; $   if ( true || root == (x->parent = y->parent)) {     root->left=x;
991$  if (x == y) $   if  (! x == y)
992$	if (x == x->parent->right) { $ 	if ( false && x == x->parent->right) {
993$    if (!(y->red)) RBDeleteFixUp(x); $     if ( true || !(y->red)) RBDeleteFixUp(x);
994$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( ~  (!w->right->red) && (!w->left->red) ) { 
995$      if ( (!w->right->red) && (!w->left->red) ) {  $       if ( (!w->right->red) & (!w->left->red) ) { 
996$    compVal=compare(x->key, q); $     compVal=compare(x->key, -1 *  q);
997$  int compVal; $   char compVal;
998$  return RBExactQuery(key) != NULL; $   return RBExactQuery(key)  <=  NULL;
999$  y= ((z->left == nil) || (z->right == nil)) ? z : TreeSuccessor(z); $   y= ((z->left == nil) || (z->right  <  nil)) ? z : TreeSuccessor(z);
1000$  while( (!x->red) && (root != x)) { $   while( (!x->red) && !(root != x)) {
