

#include "/home/tslilyai/blt/blt_args.hpp"
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cfloat>
#include <string>

unsigned intCnt = 0;
int ints [] = { -5, 49, ~0 >> 1, -3, 0, ~0 >> 1, ~0 >> 1, -46, ~0 >> 1, -(~0 >> 1) - 1, -24, 0, ~0 >> 1, ~0 >> 1, ~0 >> 1, -23, -47, 26, 31, 0, -(~0 >> 1) - 1, -(~0 >> 1) - 1, ~0 >> 1, 0, -45, -(~0 >> 1) - 1, -30, -26, ~0 >> 1, 0, ~0 >> 1, ~0 >> 1, ~0 >> 1, -(~0 >> 1) - 1, 0, 39, 23, ~0 >> 1, 0, 5, -(~0 >> 1) - 1, -15, 0, 0, 0, 24, -(~0 >> 1) - 1, 0, ~0 >> 1, -8, 0, -(~0 >> 1) - 1, 22, -21, ~0 >> 1, -49, 0, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 0, ~0 >> 1, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 29, -(~0 >> 1) - 1, 0, ~0 >> 1, ~0 >> 1, -41, 5, -5, 0, ~0 >> 1, 0, ~0 >> 1, 25, 0, -(~0 >> 1) - 1, -27, -(~0 >> 1) - 1, 0, -(~0 >> 1) - 1, ~0 >> 1, 0, -(~0 >> 1) - 1, ~0 >> 1, ~0 >> 1, -24, 0, -(~0 >> 1) - 1, ~0 >> 1, -37, 0, ~0 >> 1, -8, 0, -32, 24, -49, ~0 >> 1, -7, 14, 26, 22, -(~0 >> 1) - 1, ~0 >> 1, -30, 0, ~0 >> 1, -(~0 >> 1) - 1, 0, 32, 0, 0, 20, 0, 23, -38, ~0 >> 1, 0, -(~0 >> 1) - 1, -33, -(~0 >> 1) - 1, 0, ~0 >> 1, 0, 11, -35, -(~0 >> 1) - 1, -16, ~0 >> 1, -(~0 >> 1) - 1, 0, 42, 0, 23, 0, ~0 >> 1, -9, ~0 >> 1, -(~0 >> 1) - 1, -(~0 >> 1) - 1, ~0 >> 1, ~0 >> 1, ~0 >> 1, 0, -29, ~0 >> 1, 0, -(~0 >> 1) - 1, ~0 >> 1, -6, 0, -17, -33, ~0 >> 1, ~0 >> 1, ~0 >> 1, -23, 0, -(~0 >> 1) - 1, ~0 >> 1, 0, 0, ~0 >> 1, -(~0 >> 1) - 1, ~0 >> 1, 18, 10, -6, 13, -(~0 >> 1) - 1, 24, ~0 >> 1, -33, ~0 >> 1, -(~0 >> 1) - 1, 39, 36, 4, 39, ~0 >> 1, 2, ~0 >> 1, 0, ~0 >> 1, 13, 46, 6, 0, 0, 6, -44, ~0 >> 1, ~0 >> 1, ~0 >> 1, 0, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 28, -34, 0, 19, -1, -(~0 >> 1) - 1, 0, ~0 >> 1, -35, -20, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 0, 0, 44, 13, -34, -(~0 >> 1) - 1, -(~0 >> 1) - 1, ~0 >> 1, 0, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -29, 0, ~0 >> 1, 0, 50, -(~0 >> 1) - 1, -44, 30, -32, 0, -(~0 >> 1) - 1, 1, 11, 0, -49, 12, -22, -(~0 >> 1) - 1, 33, ~0 >> 1, ~0 >> 1, 17, -16, 0, 0, ~0 >> 1, -(~0 >> 1) - 1, -43, ~0 >> 1, ~0 >> 1, ~0 >> 1, 7, ~0 >> 1, 23, -8, 15, -(~0 >> 1) - 1, 46, 41, -(~0 >> 1) - 1, -(~0 >> 1) - 1, ~0 >> 1, ~0 >> 1, 0, ~0 >> 1, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 0, -(~0 >> 1) - 1, 15, -4, ~0 >> 1, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 0, -43, ~0 >> 1, 2, 0, -21, 0, -3, 49, -27, -47, ~0 >> 1, -(~0 >> 1) - 1, 0, -(~0 >> 1) - 1, -30, 0, ~0 >> 1, 24, 0, 0, -(~0 >> 1) - 1, 0, 0, -(~0 >> 1) - 1, 13, 0, 26, ~0 >> 1, -24, -(~0 >> 1) - 1, 0, ~0 >> 1, 0, ~0 >> 1, ~0 >> 1, 0, 0, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 0, -(~0 >> 1) - 1, 0, 29, 0, -8, -38, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -22, 0, 0, 0, 2, 31, 2, ~0 >> 1, 34, -8, -30, 44, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 0, -46, -(~0 >> 1) - 1, 0, 0, -(~0 >> 1) - 1, 6, ~0 >> 1, -41, ~0 >> 1, -(~0 >> 1) - 1, -20, -(~0 >> 1) - 1, 0, ~0 >> 1, ~0 >> 1, -(~0 >> 1) - 1, 1, -25, ~0 >> 1, ~0 >> 1, ~0 >> 1, 0, ~0 >> 1, -6, 26, ~0 >> 1, ~0 >> 1, ~0 >> 1, -(~0 >> 1) - 1, -10, 0, 0, ~0 >> 1, -27, ~0 >> 1, 0, -18, 36, 0, -43, 0, -(~0 >> 1) - 1, ~0 >> 1, 27, -31, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 45, -(~0 >> 1) - 1, 18, -(~0 >> 1) - 1, ~0 >> 1, -(~0 >> 1) - 1, ~0 >> 1, -(~0 >> 1) - 1, ~0 >> 1, 6, -(~0 >> 1) - 1, ~0 >> 1, 18, 0, -(~0 >> 1) - 1, 0, 0, 0, -(~0 >> 1) - 1, 0, 0, 0, ~0 >> 1, 0, 4, ~0 >> 1, 0, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -43, -14, 0, 20, -17, -33, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 0, -(~0 >> 1) - 1, ~0 >> 1, 0, ~0 >> 1, -32, -(~0 >> 1) - 1, -4, -5, 0, 3, 0, -14, -(~0 >> 1) - 1, 0, -31, 0, 49, 40, 0, ~0 >> 1, -(~0 >> 1) - 1, -16, 14, 0, -(~0 >> 1) - 1, ~0 >> 1, 0, ~0 >> 1, 0, -(~0 >> 1) - 1, -9, -(~0 >> 1) - 1, -45, ~0 >> 1, 6, -1, 38, -(~0 >> 1) - 1, 22, -29, -25, 42, ~0 >> 1, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -1, -29, -27, 0, -(~0 >> 1) - 1, -35, -43, 0, 0, 0, 0, -6, -7, 0, 2, -(~0 >> 1) - 1, ~0 >> 1, ~0 >> 1, -(~0 >> 1) - 1, -37, 4, -6, -(~0 >> 1) - 1, -16, 39, -23, 0, 0, -14, -(~0 >> 1) - 1, 12, 46, -45, -7, -2, 0, 0, -(~0 >> 1) - 1, 46, 0, 2, ~0 >> 1, ~0 >> 1, ~0 >> 1, -8, -(~0 >> 1) - 1, ~0 >> 1, 26, -21, 0, ~0 >> 1, ~0 >> 1, -27, 44, ~0 >> 1, ~0 >> 1, 12, ~0 >> 1, ~0 >> 1, -45, -(~0 >> 1) - 1, ~0 >> 1, -35, -15, ~0 >> 1, 20, -(~0 >> 1) - 1, 3, -46, -(~0 >> 1) - 1, ~0 >> 1, 0, ~0 >> 1, -(~0 >> 1) - 1, 31, ~0 >> 1, 32, ~0 >> 1, ~0 >> 1, 0, -32, ~0 >> 1, 0, ~0 >> 1, -(~0 >> 1) - 1, -17, -37, 0, 0, 0, ~0 >> 1, ~0 >> 1, -39, 0, 0, -18, -(~0 >> 1) - 1, -43, -(~0 >> 1) - 1, ~0 >> 1, -12, -10, ~0 >> 1, -(~0 >> 1) - 1, 0, -(~0 >> 1) - 1, 40, -46, -(~0 >> 1) - 1, ~0 >> 1, -27, 22, -39, -(~0 >> 1) - 1, 33, ~0 >> 1, -8, ~0 >> 1, 49, ~0 >> 1, -(~0 >> 1) - 1, 0, ~0 >> 1, 37, -47, 0, 38, 0, 0, -(~0 >> 1) - 1, -17, 0, 0, 33, 0, -1, -36, -(~0 >> 1) - 1, ~0 >> 1, 24, -(~0 >> 1) - 1, -48, -41, -27, -(~0 >> 1) - 1, 0, -39, 0, 0, ~0 >> 1, -(~0 >> 1) - 1, 0, 0, 0, -30, ~0 >> 1, -14, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 0, ~0 >> 1, ~0 >> 1, ~0 >> 1, ~0 >> 1, -13, -9, 32, ~0 >> 1, ~0 >> 1, 45, 13, 6, ~0 >> 1, ~0 >> 1, ~0 >> 1, 28, -31, 0, -41, 0, -9, -(~0 >> 1) - 1, 0, ~0 >> 1, 0, -(~0 >> 1) - 1, 39, 0, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -3, 4, -(~0 >> 1) - 1, 33, -26, 10, 40, ~0 >> 1, 0, 25, -(~0 >> 1) - 1, -17, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 0, 46, 11, 23, 26, 0, -35, -(~0 >> 1) - 1, -25, ~0 >> 1, 0, 5, 40, 44, -18, ~0 >> 1, 0, 0, 42, -14, ~0 >> 1, 31, 0, 0, 0, 0, -8, -11, 34, -29, -10, -(~0 >> 1) - 1, -(~0 >> 1) - 1, ~0 >> 1, -(~0 >> 1) - 1, -49, 37, -48, 9, -(~0 >> 1) - 1, 26, -6, ~0 >> 1, ~0 >> 1, 21, 6, 29, -34, 6, -(~0 >> 1) - 1, -11, -6, ~0 >> 1, ~0 >> 1, -(~0 >> 1) - 1, -1, 24, -10, 6, -(~0 >> 1) - 1, -(~0 >> 1) - 1, ~0 >> 1, 13, -(~0 >> 1) - 1, ~0 >> 1, -11, -45, ~0 >> 1, 29, 0, 0, -19, 2, ~0 >> 1, -8, -31, -42, ~0 >> 1, 5, 41, 0, ~0 >> 1, -16, ~0 >> 1, -(~0 >> 1) - 1, ~0 >> 1, 15, -(~0 >> 1) - 1, -20, 0, -6, 0, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -9, -2, 37, ~0 >> 1, 15, 0, -35, -(~0 >> 1) - 1, 23, 18, -30, ~0 >> 1, -27, 47, ~0 >> 1, 44, -(~0 >> 1) - 1, -7, -19, 0, -(~0 >> 1) - 1, ~0 >> 1, 0, 20, 0, 0, -(~0 >> 1) - 1, ~0 >> 1, 0, -27, -(~0 >> 1) - 1, -(~0 >> 1) - 1, ~0 >> 1, ~0 >> 1, -(~0 >> 1) - 1, ~0 >> 1, -24, 0, 0, 0, -(~0 >> 1) - 1, 0, 0, 0, ~0 >> 1, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -42, 40, 44, -(~0 >> 1) - 1, 0, ~0 >> 1, -(~0 >> 1) - 1, 0, -6, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 15, -(~0 >> 1) - 1, -20, ~0 >> 1, -44, ~0 >> 1, -45, -44, -46, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -(~0 >> 1) - 1, ~0 >> 1, -(~0 >> 1) - 1, 40, ~0 >> 1, ~0 >> 1, 0, 40, -25, -36, ~0 >> 1, 0, -(~0 >> 1) - 1, 0, 0, 47, -19, ~0 >> 1, 0, -(~0 >> 1) - 1, 0, -35, -43, 0, 0, -31, -44, -(~0 >> 1) - 1, -24, -11, -38, -37, -(~0 >> 1) - 1, 46, 26, ~0 >> 1, 0, 0, 0, 0, -(~0 >> 1) - 1, -23, -37, 27, -20, ~0 >> 1, 13, -(~0 >> 1) - 1, 0, -5, -(~0 >> 1) - 1, -43, -(~0 >> 1) - 1, -21, 11, -(~0 >> 1) - 1, ~0 >> 1, -14, ~0 >> 1, -39, -(~0 >> 1) - 1, 32, ~0 >> 1, 0, 13, 45, ~0 >> 1, -(~0 >> 1) - 1, 0, ~0 >> 1, ~0 >> 1, -(~0 >> 1) - 1, 49, 0, 0, -34, 0, 0, 0, -(~0 >> 1) - 1, -27, -6, ~0 >> 1, 13, 16, 0, -5, 35, -(~0 >> 1) - 1, -29, ~0 >> 1, ~0 >> 1, 0, 0, ~0 >> 1, -(~0 >> 1) - 1, ~0 >> 1, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 0, -30, -25, ~0 >> 1, ~0 >> 1, -(~0 >> 1) - 1, 46, 33, -(~0 >> 1) - 1, ~0 >> 1, ~0 >> 1, -(~0 >> 1) - 1, ~0 >> 1, -23, -(~0 >> 1) - 1, 0, 0, 35, 0, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 46, ~0 >> 1, ~0 >> 1, 0, 0, 0, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -45, ~0 >> 1, 0, -(~0 >> 1) - 1, -(~0 >> 1) - 1, ~0 >> 1, 30, -(~0 >> 1) - 1, -20, ~0 >> 1, 37, 16, -(~0 >> 1) - 1, 39, ~0 >> 1, -(~0 >> 1) - 1, -8, 0, 0, -(~0 >> 1) - 1, -28, ~0 >> 1, ~0 >> 1, 0, ~0 >> 1, ~0 >> 1, -17, 0, 47, 0, 0, ~0 >> 1, ~0 >> 1, 42, 0, -(~0 >> 1) - 1, ~0 >> 1, -43, 1, 0, 11, ~0 >> 1, 36, 0, 0, 29, ~0 >> 1, 1, -48, -21, -43, 9, ~0 >> 1, ~0 >> 1, -(~0 >> 1) - 1, ~0 >> 1, -35, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 0, -19, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 31, ~0 >> 1, 17, -16, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 0, -8, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 0, 0, 0, -16, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 0, ~0 >> 1, ~0 >> 1, -(~0 >> 1) - 1, ~0 >> 1, ~0 >> 1, 0, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -47, 0, ~0 >> 1, ~0 >> 1, 0, -(~0 >> 1) - 1, ~0 >> 1, -45, 50, ~0 >> 1, -(~0 >> 1) - 1, ~0 >> 1, -40, -18, 41, 0, 39, ~0 >> 1, 48, -19, 0, -29, 0, 26, 0, 0, -(~0 >> 1) - 1, 45, -5, -(~0 >> 1) - 1, 30, 0, -8, -1, -18, -(~0 >> 1) - 1, 0, 16, -(~0 >> 1) - 1, -(~0 >> 1) - 1, ~0 >> 1, -21, ~0 >> 1, 0, ~0 >> 1, -(~0 >> 1) - 1, ~0 >> 1, -24, 38, -33, ~0 >> 1, 34, 0, -11, 0, -(~0 >> 1) - 1, 38, ~0 >> 1, -(~0 >> 1) - 1, -7, 0, 21, 0, 49, 0, -(~0 >> 1) - 1, -(~0 >> 1) - 1, ~0 >> 1, -(~0 >> 1) - 1, ~0 >> 1, 13, -(~0 >> 1) - 1, 0, 2, ~0 >> 1, -9, -46, 0, -(~0 >> 1) - 1, ~0 >> 1, 0, 33, 0, 0, ~0 >> 1, ~0 >> 1, 0, -(~0 >> 1) - 1, ~0 >> 1, 41, ~0 >> 1, 0, -28, -50, -(~0 >> 1) - 1, 0, -35, 0, 0, 0, 0, -(~0 >> 1) - 1, ~0 >> 1, 0, 22, -8, 42, 30, 35, -(~0 >> 1) - 1, 22, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 33, 37, 33, 0, ~0 >> 1, -15, 5, 0, 0, -(~0 >> 1) - 1, 39, -(~0 >> 1) - 1, -20, 0, -(~0 >> 1) - 1, ~0 >> 1, ~0 >> 1, ~0 >> 1, -(~0 >> 1) - 1, -36, 18, -33, -43, -9, -30, -(~0 >> 1) - 1, ~0 >> 1, ~0 >> 1, 9, 21, 0, ~0 >> 1, 0, ~0 >> 1, ~0 >> 1, -21, 0, ~0 >> 1, 17, -14, -(~0 >> 1) - 1, -7, -40, 1, -(~0 >> 1) - 1, 0, ~0 >> 1, 15, 0, -42, ~0 >> 1, -(~0 >> 1) - 1, -7, ~0 >> 1, -(~0 >> 1) - 1, -45, 3, 43, -46, -41, ~0 >> 1, -6, 11, -9, -20, 0, ~0 >> 1, 31, 22, 0, -9, ~0 >> 1, -(~0 >> 1) - 1, -13, -38, -(~0 >> 1) - 1, -4, 38, -(~0 >> 1) - 1, ~0 >> 1, ~0 >> 1, 48, -12, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -19, ~0 >> 1, -(~0 >> 1) - 1, 0, -13, 0, -42, -(~0 >> 1) - 1, 0, 3, -(~0 >> 1) - 1, -(~0 >> 1) - 1, ~0 >> 1, -5, 17, ~0 >> 1, -(~0 >> 1) - 1, -3, -35, 9, 0, -(~0 >> 1) - 1, -(~0 >> 1) - 1, -42, -(~0 >> 1) - 1, -(~0 >> 1) - 1, 45, 32, 23, -(~0 >> 1) - 1, 0, 0, ~0 >> 1, ~0 >> 1, ~0 >> 1, 22, 0, 19, 46, 25, ~0 >> 1, 0, ~0 >> 1, 45, -2, ~0 >> 1, ~0 >> 1, 0, -43, -18, 0, -(~0 >> 1) - 1, -30, ~0 >> 1, ~0 >> 1, 0, ~0 >> 1, -(~0 >> 1) - 1, ~0 >> 1, ~0 >> 1, 41, ~0 >> 1, 21, -(~0 >> 1) - 1, ~0 >> 1, -(~0 >> 1) - 1, -28, 50, ~0 >> 1, -(~0 >> 1) - 1, -45, ~0 >> 1, ~0 >> 1, -13, ~0 >> 1, ~0 >> 1, ~0 >> 1, -(~0 >> 1) - 1, 0, -17, -(~0 >> 1) - 1, 25, -9, -18, -(~0 >> 1) - 1, 0, ~0 >> 1, -3, 17, -30 };


static const char alphanum[] =
"0123456789"
"!@#$%^&*"
"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
"abcdefghijklmnopqrstuvwxyz";  

static char genRandom() { return alphanum[rand() % (sizeof(alphanum) - 1)]; }

static string_code hashit (std::string const& inString) {
    if (inString == "int" || inString == "long") return eint;
    if (inString == "unsigned") return euint;
    if (inString == "long long") return ellong;
    if (inString == "float") return efloat;
    if (inString == "char") return echar;
    if (inString == "char*") return estring;
}

void* blt_args::get_arg(std::string const& arg_type) {
  switch (hashit(arg_type)) {
    case eint:
      return (void*) &ints[intCnt++];
    default:
      printf("Error: Argument generator required\n");
      exit(1);
  }
}

/*
void* blt_args::get_arg(std::string const& arg_type) {
  void* ret;
  switch (hashit(arg_type)) {
    case eint: {
      int ints[5];
        ints[0] = rand() % 50;
        ints[1] = -1*(rand() % 50);
        ints[2] = INT_MAX;
	// TL Note: For now so when -2147483648 is put in replay file
	// the compiler doesn't yell
        ints[3] = INT_MIN+1;
        ints[4] = 0;
      int* ret = new int[1];
      // TL for now
      ret[0] = ints[2];
      //      ret[0] = ints[rand() / (RAND_MAX/5)];

      return (void*)ret;
    }
    case euint: {
      unsigned uints[3];
        uints[0] = rand() % UINT_MAX;
        uints[1] = UINT_MAX;
        uints[2] = 0;
      unsigned* ret = new unsigned[1];
      ret[0] = uints[rand() / (RAND_MAX/3)];
      return (void*) ret;
    }
    case ellong: {
      long long llongs[5];
        llongs[0] = rand() % LLONG_MAX;
        llongs[1] = -1*(rand() % LLONG_MAX);
        llongs[2] = LLONG_MAX;
        llongs[3] = LLONG_MIN;
        llongs[4] = 0;
      long long* ret = new long long[1];
      ret[0] = llongs[rand() / (RAND_MAX/5)];
      return (void*) ret;
    }
    case efloat: {
      float floats[5];
        floats[0] = static_cast <float> (rand()) /( static_cast <float> (RAND_MAX/(FLT_MAX)));
        floats[1] = FLT_MIN + static_cast <float> (rand()) * FLT_MAX;
        floats[2] = FLT_MAX;
        floats[3] = FLT_MIN; 
        floats[4] = 0;
      float* ret = new float[1];
      ret[0] = floats[rand() / (RAND_MAX/5)];
      return (void*) ret;
    }
    case echar: {
      char chars[5];
        chars[0] = rand() % CHAR_MAX;
        chars[1] = -1*(rand() % CHAR_MAX);
        chars[2] = ' ';
        chars[3] = CHAR_MAX;
        chars[4] = CHAR_MIN;
      char* ret = new char[1];
      ret[0] = chars[rand() / (RAND_MAX/5)];
      return (void*) ret; 
    }
    case estring: {
      char* strings[3];
        strings[0] = NULL;
        strings[1] = (char*)"";
        unsigned r = rand() % CHAR_MAX;
        strings[2] = (char*) malloc(sizeof(char) * r);
        for(unsigned i = 0; i < r; ++i)
            strings[2][i] = genRandom();
        strings[2][r] = 0;
      char** ret = new char*[1];
      ret[0] = strings[rand() / (RAND_MAX/3)];
      return (void*) ret; 
    }
    default:
      printf("Error: Argument generator required\n");
      exit(1);
  }
}
*/
